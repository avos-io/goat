// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockmethodHandler is an autogenerated mock type for the methodHandler type
type MockmethodHandler struct {
	mock.Mock
}

type MockmethodHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockmethodHandler) EXPECT() *MockmethodHandler_Expecter {
	return &MockmethodHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: srv, ctx, dec, interceptor
func (_m *MockmethodHandler) Execute(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	ret := _m.Called(srv, ctx, dec, interceptor)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, context.Context, func(interface{}) error, grpc.UnaryServerInterceptor) (interface{}, error)); ok {
		return rf(srv, ctx, dec, interceptor)
	}
	if rf, ok := ret.Get(0).(func(interface{}, context.Context, func(interface{}) error, grpc.UnaryServerInterceptor) interface{}); ok {
		r0 = rf(srv, ctx, dec, interceptor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, context.Context, func(interface{}) error, grpc.UnaryServerInterceptor) error); ok {
		r1 = rf(srv, ctx, dec, interceptor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockmethodHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockmethodHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - srv interface{}
//   - ctx context.Context
//   - dec func(interface{}) error
//   - interceptor grpc.UnaryServerInterceptor
func (_e *MockmethodHandler_Expecter) Execute(srv interface{}, ctx interface{}, dec interface{}, interceptor interface{}) *MockmethodHandler_Execute_Call {
	return &MockmethodHandler_Execute_Call{Call: _e.mock.On("Execute", srv, ctx, dec, interceptor)}
}

func (_c *MockmethodHandler_Execute_Call) Run(run func(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor)) *MockmethodHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(context.Context), args[2].(func(interface{}) error), args[3].(grpc.UnaryServerInterceptor))
	})
	return _c
}

func (_c *MockmethodHandler_Execute_Call) Return(_a0 interface{}, _a1 error) *MockmethodHandler_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockmethodHandler_Execute_Call) RunAndReturn(run func(interface{}, context.Context, func(interface{}) error, grpc.UnaryServerInterceptor) (interface{}, error)) *MockmethodHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockmethodHandler creates a new instance of MockmethodHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockmethodHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockmethodHandler {
	mock := &MockmethodHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
